In this version4 I used the volumes for linked the data between the host system
and the container. Usualy I can go inside a container and modify the code inside it
and ouside the container i can see the changes. The only problem is when destroy 
a container all the data I updated inside the container will be lost.
So, to preserv the data even though the container will be distroyed 
we use VOLUME.
Volumes are the preferred mechanism for persisting data generated by and used by Docker containers.   
there is a difference between volume and bind mounts
bind mounts: When you use a bind mount, a file or directory on the host machine is mounted into a container. 
bind mounts: link a repository from the host into container, so each time
I modify something it will change in both (container and host). usualy is a folder wich is shared
by both. Useful if you want link the working directory from the host into working directory
on the container.
Volumes: 

.$docker run -it -v $(pwd):/github.com/RachidP/orderpackages orderpackage:v6
or 
.$docker run -it --mount  type=bind,source=$(pwd),target=/github.com/RachidP/orderpackages orderpackage:v7



note if you use the --mount you have to specify type=bind, otherwise there be a error
(look at https://github.com/moby/moby/issues/34532#issuecomment-322738970)

Used golang:1.11.2-alpine3.8 as image in golang
otherwise the project is the some as version1
is the some
A complete example show how a program is initialized with go. 
In this case I also used go modules and docker

go run *.go
├── Main package is executed
├── All imported packages are initialized
|  ├── All imported packages are initialized (recursive definition)
|  ├── All global variables are initialized 
|  └── init functions are called in lexical file name order
└── Main package is initialized
   ├── All global variables are initialized
   └── init functions are called in lexical file name order

link:
https://medium.com/rungo/everything-you-need-to-know-about-packages-in-go-b8bac62b74cc


docker with golang:
1)write a file dockerfile

case A: the following istructions will entry inside a docker container

FROM golang:latest
#set the working directory on docker where put golang packages
WORKDIR /github.com/RachidP/orderpackages2 
RUN pwd
COPY . .
RUN ls -la


case B: the following istructions will compile the app inside the docker container
FROM golang:latest

WORKDIR /github.com/RachidP/orderpackages2
RUN pwd
COPY . .
RUN ls -la
RUN go build -o orderpackages app/* 
ENTRYPOINT [ "./orderpackages" ]


docker commands
1)docker build -t orderpackage:v3 .
A)docker run -it --rm --name my_running_app2 orderpackage:v3



NB. I create this folder outside the gopath and i used go mod, so use outside to go path
or active go mod inside gopath